// В JavaScript имеется восемь типов данных:
// String: представляет строку
// Number: представляет числовое значение
// BigInt: предназначен для представления очень больших целых чисел
// Boolean: представляет логическое значение true или false
// Undefined: представляет одно специальное значение - undefined и указывает, что значение не установлено
// Null: представляет одно специальное значение - null и указывает на отсутствие значения
// Symbol: представляет уникальное значение, которое часто применяется для обращения к свойствам сложных объектов
// Object: представляет комплексный объект


//----------------------------------------------------Number------------------------------------------------------------
// Тип Number представляет числа в JavaScript, которые могут быть целыми или дробными:
// Целые числа, например, 35. Мы можем использовать как положительные, так и отрицательные числа. Диапазон используемых
// чисел: от -2 в 53 степени до 2 в 53 степени.
// Дробные числа (числа с плавающей точкой), например, 3.5575. Опять же можно использовать как положительные, так и
// отрицательные числа. Для чисел с плавающей точкой используется тот же диапазон: от -2 в 53 степени до 2 в 53 степени.
// Например:
// let x = 45;
// let y = 23.897;
// В качестве разделителя между целой и дробной частями, как и в других языках программирования, используется точка.


//-----------------------------------------------------BigInt-----------------------------------------------------------
// Тип BigInt добавлен в последних стандартах JavaScript для представления очень больших целых чисел, которые выходят за
// пределы диапазона типа number. Это не значит, что мы не можем совсем работать с большими числами с помощью типа
// number, но работа с ними в случае с типом number будет сопряжена с проблемами. Рассмотрим небольшой пример:
let num = 9007199254740991
console.log(num);       // 9007199254740991
console.log(num + 1);   // 9007199254740992
console.log(num + 2);   // 9007199254740992
// Здесь переменной num присваивается максимальное значение. И далее прибавляем к ней некоторые значения и выводим на
// консоль результат. И результаты могут нас смутить, особенно в случае прибавления числа 2.

// Для определения числа как значения типа BigInt в конце числа добавляется суффикс n:
// let dimension = 19007n;
// const value = 2545n;

// Например, изменим из предыдущего примера тип number на bigint:
num = 9007199254740991n
console.log(num);       // 9007199254740991n
console.log(num + 1n);  // 9007199254740992n
console.log(num + 2n);  // 9007199254740993n
console.log(num + 3n);  // 9007199254740994n


//----------------------------------------------------Boolean-----------------------------------------------------------
let isAlive = true;
let isDead = false;


//-----------------------------------------------------String------------------------------------------------------
// Тип String представляет строки. Для определения строк применяются кавычки, причем, можно использовать как двойные,
// так и одинарные, так и косые кавычки. Единственно ограничение: тип закрывающей кавычки должен быть тот же, что и тип
// открывающей, то есть либо обе двойные, либо обе одинарные.
let user = "Tom";
let company = 'Microsoft';
let language = `JavaScript`;

console.log(user);
console.log(company);
console.log(language);

// Если внутри строки встречаются кавычки, то мы их должны экранировать слэшем. Например, пусть у нас есть текст
// "Бюро "Рога и копыта"". Теперь экранируем кавычки:
company = "Бюро \"Рога и копыта\"";
let company2 = 'Бюро "Рога и копыта"';

// Интерполяция
// Использование косых кавычек позволяет нам применять такой прием как интерполяция - встраивать данные в строку.
// Например:
user = "Tom";
let text = `Name: ${user}`;
console.log(text);  // Name: Tom

// Подобным образом можно встраивать и больше количество данных:
user = "Tom";
let age = 37;
let isMarried = false;
text = `Name: ${user}   Age: ${age}   IsMarried: ${isMarried}`;
console.log(text);  // Name: Tom   Age: 37   IsMarried: false


//--------------------------------------------------null и undefined----------------------------------------------------
// undefined указывает, что значение не определено или не установлено. Например, когда мы только определяем переменную
// без присвоения ей начального значения, она представляет тип undefined:
let isAlive2;
console.log(isAlive2); // выведет undefined

// Присвоение значение null означает, что у переменной отсутствует значение:
isAlive2 = null;
console.log(isAlive2);
isAlive2 = undefined;
console.log(isAlive2);


//------------------------------------------------------object----------------------------------------------------------
// Тип object представляет сложный объект. Простейшее определение объекта представляют фигурные скобки:
const obj = {};
const obj2 = {name: 'Vladimir', age: 24};
console.log(obj2);


//----------------------------------------------Динамическая типизация--------------------------------------------------
// JavaScript является языком со слабой типизацией. Это значит, что переменные могут динамически менять тип. Например:
let id;  // тип undefined
console.log(id);
id = 45;  // тип number
console.log(id);
id = "45"; // тип string
console.log(id);

// Несмотря на то, что во втором и третьем случае консоль выведет нам число 45, но во втором случае переменная id будет
// представлять число, а в третьем случае - строку.
// Это важный момент, который надо учитывать и от которого зависит поведение переменной в программе:
let a = 45;  // тип number
let b = a + 5;
console.log(b); // 50

a = "45"; // тип string
let c = a + 5
console.log(c); // 455
