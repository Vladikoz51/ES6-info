// Модули позволяют организовать функционал в отдельные блоки, которые затем можно использовать в других приложениях.
// Отличие модулей от обычных скриптов:
// Для загрузки модулей применяется политика CORS. Это значит, что мы не можем просто кинуть в браузер html-страницу,
// которая подключает модуль. Модуль загружается с использованием протокола http/https. То есть страница html, которая
// загружает модуль, должна располагаться на каком-нибудь веб-сервере.
// Модули всегда выполняются в режиме strict mode.
// Модули по умолчанию загружаются асинхронно.
// Модули загружаются и выполняются только один раз.
// Модули позволяют использовать выражения await верхнего уровня без определения и вызова асинхронной функции.
// Модули могут импортировать функционал из других модулей и, в свою очередь, экспортировать свою функциональность в
// другие модули.
// Модули выполняются не в глобальном контексте, а в своей собственной области видимости. То есть переменные, константы,
// функции, классы и т.д., определенные внутри модуля, не доступны извне, пока они не будут явным образом экспортированы.
// А чтобы другой модуль мог их использовать, он должен их импортировать.

// Если файл содержит выражения import или export, он рассматривается как модуль. Так, Чтобы сделать из простого скрипта
// модуль, достаточно добавить в файл:
// export {};


//----------------------------------------------Определение модуля. Экспорт.--------------------------------------------
// Для того, чтобы какие-то компоненты модуля (переменные/константы/функции/классы) модуля можно было подключить и
// использовать в другом модуле, их надо экспортировать. Мы можем экспортировать каждый компонент по отдельности. Для
// этого перед определением компонента указывается ключевое слово export.
// Например, пусть у нас будет следующий модуль message.js (см. message.js)


// Чтобы сделать экспорт по умолчанию, после оператора export указывается оператор default (см. message.js)


//----------------------------------------------Определение модуля. Импорт.---------------------------------------------
// Теперь подключим эту функцию в другой файл. Для этого создадим файл main.js и добавим туда следующий код:
// import {sayHello} from "./message.js";
// sayHello();
// Для подключения функционала из другого модуля применяется ключевое слово import, после которого идут названия
// подключаемых компонентов. Все подключаемые из модуля компоненты помещаются в фигурные скобки: import {sayHello} - в
// данном случае подключается функция sayHello.


// Импорт всего модуля
// Если в подключаемом модуля очень много компонентов, и мы собираемся использовать все возможности модуля, то
// перечислять все подключаемые компоненты может быть утомительно. В этом случае мы можем подключить весь функционал
// модуля в виде:
// import * as псевдоним_модуля from "модуль";

// После оператора import идет знак звездочки, который указывает, что надо подключить все экспортируемые компоненты. А
// после оператора as идет псевдоним модуля, с которым будет сопоставляться подключаемый модуль.
// Например, подключим в файле main.js весь модуль message.js

// Для импорта компонента по умолчанию достаточно после оператора import прописать имя этого компонента.


//--------------------------------Использование псевдонимов при экспорте и импорте--------------------------------------
// С помощью оператора as экспортируемым/импортируемым компонентам модуля можно назначить псевдоним. Затем для
// использования подобных компонентов применяется не их непосредственное имя, а их псевдоним.




//----------------------------------------------------Загрузка модулей--------------------------------------------------
// Для загрузки модулей определим в папке со скомпилированными файлами веб-страницу index.html:

// Для загрузки главного модуля приложения - main.js определяется элемент <script>, у которого устанавливается атрибут type="module".
//
// Загрузка модулей производится через AJAX, поэтому скомпилированные модули должны быть размещены на веб-сервере. То
// есть у нас не получится просто кинуть страницу в веб-браузер и загрузить на нее модули. Такая веб-страница должна
// быть размещена на веб-сервере. Поэтому прежде всего надо определиться с веб-сервером. Веб-сервер может быть любым. В
// данном случае воспользуемся самым простым вариантом - Node.js. Но опять же вместо node.js это может быть любая другая
// технология сервера - php, asp.net, python и т.д. либо какой-то определенный веб-сервер типа Apache или IIS.

// Итак, создадим в папке с файлами модулей файл сервера. Пусть он будет называться server.js.