// Для работы с наборами данных предназначены массивы. Для создания массива применяются квадратные скобки []. Внутри
// квадратных скобок определяются элементы массива.
const myArray = [];
const people = ["Tom", "Alice", "Sam"];
console.log(people);    // ["Tom", "Alice", "Sam"];

// Для обращения к отдельным элементам массива используются индексы. Отсчет начинается с нуля, то есть первый элемент
// будет иметь индекс 0, а последний - 2:
console.log(people[0]); // Tom
const person3 = people[2]; // Sam
console.log(person3); // Sam

// Если мы попробуем обратиться к элементу по индексу больше размера массива, то мы получим undefined:
console.log(people[7]); // undefined

// Также по индексу осуществляется установка значений для элементов массива:
console.log(people[0]); // Tom
people[0] = 'Bob';
console.log(people[0]);

// Причем в отличие от других языков, как C# или Java, можно установить элемент, который изначально не установлен:
people[7] = 'Bob';
console.log(people[7]);

// Также стоит отметить, что в отличие от ряда языков программирования в JavaScript массивы не являются строго
// типизированными, один массив может хранить данные разных типов:
const objects = ["Tom", 12, true, 3.14, false];
console.log(objects);


// Чтобы узнать длину массива, используется свойство length:
const fruits = ['apple', 'orange', 'mango'];
for (let i = 0; i < fruits.length; i++) {
  console.log(fruits[i]);
}


//------------------------------------------------Многомерные массивы---------------------------------------------------
// Массивы могут быть одномерными и многомерными. Каждый элемент в многомерном массиве может представлять собой
// отдельный массив. Выше мы рассматривали одномерный массив, теперь создадим многомерный массив:
const numbers1 = [0, 1, 2, 3, 4, 5 ]; // одномерный массив
const numbers2 = [[0, 1, 2], [3, 4, 5] ]; // двумерный массив
