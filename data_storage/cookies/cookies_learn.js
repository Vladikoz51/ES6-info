// HTTP cookie (web cookie, cookie браузера) - это небольшой фрагмент данных, отправляемый сервером на браузер
// пользователя, который тот может сохранить и отсылать обратно с новым запросом к данному серверу. Это, в частности,
// позволяет узнать, с одного ли браузера пришли оба запроса (например, для аутентификации пользователя). Они запоминают
// информацию о состоянии для протокола HTTP, который сам по себе этого делать не умеет.

// Cookie используются, главным образом, для:
// Управления сеансом (логины, корзины для виртуальных покупок)
// Персонализации (пользовательские предпочтения)
// Мониторинга (отслеживания поведения пользователя)

// Для работы с куками в объекте document предназначено свойство cookie.
// Для установки куков достаточно свойству document.cookie присвоить строку с куками:
document.cookie = "login=tom32;";
// В данном случае устанавливается кука, которая называется "login" и которая имеет значение "tom32". И в большинстве
// браузеров мы можем посмотреть ее, узнать всю информацию о ней и в дальнейшем ее можно использовать в приложении.

// Строка куки принимает до шести различных параметров:
// имя куки
// значение
// срок окончания действия (expires)
// путь (path)
// домен (domain)
// secure

// Выше использовались только два параметра: имя куки и значение. То есть в случае со строкой "login=tom32;" куки имеет
// имя login и значение tom32.
// Но подобная куки имеет очень ограниченный срок жизни: если явным образом не установить срок действия, то кука будет
// удалена с закрытием браузера. Подобная ситуация, возможно, идеальна для тех случаев, когда необходимо удалять всю
// информацию после завершения работы с веб-приложением и закрытия браузера. Однако данное поведение не всегда подходит.

// И в этом случае нам надо установить параметр expires, то есть срок действия куков:
document.cookie = "login=tom32;expires=Mon, 15 Nov 2021 00:00:00 GMT;";
// В этом случае для других путей на сайте, например, www.mysite.com/shop, эти куки будут недоступны.

// Если на нашем сайте есть несколько доменов, и мы хотим установить куки непосредственно для определенного домена,
// тогда можно использовать параметр domain. Например, у нас на сайте есть поддомен blog.mysite.com:
document.cookie = "login=tom32;expires=Mon, 31 Aug 2015 00:00:00 GMT;path=/;domain=blog.mysite.com;";
// Параметр path=/ указывает, что куки будут доступны для всех директорий и путей поддомена blog.mysite.com.

// Последний параметр - secure задает использование SSL (SecureSockets Layer) и подходит для сайтов, использующих
// протокол https. Если значение этого параметра равно true, то куки будут использоваться только при установке
// защищенного соединения ssl. По умолчанию данный параметр равен false.
document.cookie = "login=tom32;expires=Mon, 31 Aug 2015 00:00:00 GMT;path=/;domain=blog.mysite.com;secure=true;";


//------------------------------------------------Получение куки--------------------------------------------------------
// Для простейшего извлечения куки из браузера достаточно обратиться к свойству document.cookie:
let expire = new Date();
expire.setHours(expire.getHours() + 4);

document.cookie = "city=Berlin;expires="+expire.toUTCString()+";";
document.cookie = "country=Germany;expires="+expire.toUTCString()+";";
document.cookie = "login=tom32;";
document.write(document.cookie);
// Здесь были установлены три куки, и браузер выведет нам все эти куки.

// Извлеченные куки не включают параметры expires, path, domain и secure. Кроме того, сами куки разделяются точкой с
// запятой, поэтому нужно еще провести некоторые преобразования, чтобы получить их имя и значение:
let cookies = document.cookie.split(";");
for (let i = 0; i < cookies.length; i++) {
  let parts = cookies[i].split("="),
    name = parts[0],
    value = parts[1];
  document.write("Имя куки: " + name + "<br/>");
  document.write("Значение: " + value + "<br/><br/>");
}

// До недавнего времени cookie принято было использовать в качестве хранилища информации на стороне пользователя. Это
// могло иметь смысл в отсутствии вариантов, но теперь, когда в распоряжении браузеров появились различные API (
// программные интерфейсы приложения) для хранения данных, это уже не так. Из-за того, что cookie пересылаются с каждым
// запросом, они могут слишком сильно снижать производительность (особенно в мобильных устройствах). В качестве хранилищ
// данных на стороне пользователя вместо них можно использовать Web storage API (localStorage and sessionStorage) и
// IndexedDB.


