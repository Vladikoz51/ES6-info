//----------------------------------------------Глобальные переменные---------------------------------------------------
// Все переменные и константы, которые объявлены вне функций, являются глобальными:
let a = 1;
const b = true;
// Здесь переменная a и константа b являются глобальными. Они доступны из любого места программы.
function displaySum(){
  let c = a + b;
  console.log(c);
}
// А вот переменная c глобальной не является, так как она определена внутри функции и видна только в этой функции.

// Определение локальной области видимости
// Для определения локальной области видимости в JavaScript используются фигурные скобки { }, которые создают блок кода.
// Этот блок кода может быть безымянным, может быть именованным, например, функция, либо может представлять условную или
// циклическую конструкцию. Например, определение переменных в безымянном блоке кода:
{
  var d = 5;
  let e = 8;
  const f = 9;
}
// Однако в этом случае поведение переменной зависит от способа ее определения (через var или через let) и от типа блока.
// var определяет локальные переменные уровня функции, а let определяет локальные переменные уровня блока кода (подобным
// образом const определяет константы уровня блока кода). Рассмотрим, в чем состоит отличие.


//--------------------------------------------Переменные и константы функции--------------------------------------------
// Переменные и константы, определенные внутри функции, видны (то есть могут использоваться) только внутри этой функции:
function print(){
  var g = 6;
  let h = 8;
  const i = 9;
  console.log("Function print: g =", g);
  console.log("Function print: h =", h);
  console.log("Function print: i =", i);
}
print();
// console.log("Global: g =", g);  // Uncaught ReferenceError: a is not defined
// Здесь мы видим, что при попытке обратиться к переменной a вне функции print(), браузер выводит ошибку. При этом
// подобное поведение не зависит от того, что это за переменная - var или let, либо это константа. Подобное поведение
// для всех переменных и констант одинаково.


//--------------------------------Локальные переменные в блоках кода, условиях и циклах--------------------------------
// Переменная, объявленная с помощью var, может использоваться вне блока:
// безымянный блок
{
  var x = 5;
}
console.log("x =", x);  // a = 5

// условная конструкция
if (true) {
  var y = 6;
}
console.log("y =", y);  // b = 6

// цикл
for (var i = 0; i < 5; i++) {
  var z = 7;
}
console.log("z =", z);  // c = 7
// Единственное условие, что блок кода должен срабатывать, чтобы инициализировать переменную. Так, в примере выше
// условие в конструкции if и в цикле for установлено так, что блок этих конструкций будет выполняться. Однако, что
// если условие будет иным, что блок не будет выполняться?
if (false) {
  var b2 = 6;
}
console.log("b2 =", b2);  // b = undefined

// цикл
for(var i = 1; i < 0; i++){
  var c2 = 7;
}
console.log("c2 =", c2);  // c = undefined
// В таком случае мы опять же сможем обращаться к переменным, только они будут иметь значение undefined.

// Переменная let и константы
// Теперь посмотрим, как будут вести себя в подобной ситуации переменные, определенные с помощью let:
{
  let a2 = 5;
}
// console.log("a2 = ", a2);  // Uncaught ReferenceError: a is not defined
// В данном случае мы получим ошибку. Мы можем использовать переменные let, определенные внутри блока кода только внутри
// этого блока кода, тоже самое относится и к константам.


//---------------------------------------------------Сокрытие переменных------------------------------------------------
// Что если у нас есть две переменных - одна глобальная, а другая локальная, которые имеют одинаковое имя:
var z2 = 89;
function print2() {

  var z2 = 10;
  console.log(z2); // 10
}
print2(); // 10
// В этом случае в функции будет использоваться та переменная z, которая определена непосредственно в функции. То есть
// локальная переменная скроет глобальную. Однако конкретное поведение при сокрытии зависит от того, как определяется
// переменная.

// Скрытие переменной let
// Как писалось выше, оператор let определяет переменную уровня блока кода. То есть каждый блок кода определяет новую
// область видимости, в которой существует переменная. Ве блока кода, где определена переменная, она не существует.
// Соответственно мы можем одновременно определить переменную на уровне блока и на уровне функции:
let z3 = 10;
function displayZ(){

  let z3 = 20;

  {
    let z3 = 30;
    console.log("Block:", z3);
  }

  console.log("Function:", z3);
}

displayZ();
console.log("Global:", z3);
// Все, что относится к оператору let, относится и к оператору const, который определяет константы уровня блока кода.
// Блоки кода задают область видимости констант, а константы, определенные на вложенных блоках кода, скрывают внешние
// константы с тем же именем.






